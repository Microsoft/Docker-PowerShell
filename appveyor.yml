version: '{build}'
pull_requests:
  do_not_increment_build_number: true
image: WMF 5
init:
- ps: Install-PackageProvider NuGet -Force
- ps: (new-object net.webclient).DownloadFile('https://raw.githubusercontent.com/dotnet/cli/master/scripts/obtain/dotnet-install.ps1', "C:/dotnet-install.ps1")
- ps: C:/dotnet-install.ps1
install:
- ps: Install-Module platyPS -Force -RequiredVersion 0.7.0
- cmd: git submodule update --init --recursive
nuget:
  disable_publish_on_pr: true
build_script:
- ps: $psversiontable
- ps: dotnet --version
- ps: get-packageprovider nuget
- ps: ipmo platyPS -Version 0.7.0 ; get-module -name platyPS
- ps: |
    $env:PATH = "c:\program files\dotnet;$env:PATH"

    $projectFile = "src\Docker.PowerShell\Docker.PowerShell.csproj"
    $projectRawContents = Get-Content $projectFile -Raw
    $versionNodes =  $projectRawContents | Select-Xml -XPath "/Project/PropertyGroup/Version"
    if ($versionNodes.Count -ne 1) {
      throw "Invalid number of version nodes found in csproj."
    }

    $version = $versionNodes.Node.InnerXml

    # Tags do not get build versions.
    if ($env:APPVEYOR_REPO_TAG -ne "true") {
      $version += ".$($env:APPVEYOR_BUILD_VERSION.split("-")[0])"

      # Update the .csproj version to include the build number.
      $newProjectContents = $projectRawContents -replace "<Version>.+</Version>", "<Version>$version</Version>"
      $newProjectContents | Out-File -Encoding UTF8 $projectFile
    }

    # Replace module manifest version.
    $manifest = "src\Docker.PowerShell\Docker.psd1"
    (Get-Content $manifest -Raw) -replace "ModuleVersion.+","ModuleVersion = '$version'" | Out-File $manifest

    Get-Content $projectFile
    Get-Content $manifest
- ps: dotnet restore src/Docker.PowerShell/Docker.PowerShell.csproj
- ps: dotnet build src/Docker.PowerShell/Docker.PowerShell.csproj
- ps: dotnet publish -f net46 -o $pwd\bin\Docker\clr -c Release $pwd\src\Docker.PowerShell
- ps: dotnet publish -f netstandard1.6 -o $pwd\bin\Docker\coreclr -c Release $pwd\src\Docker.PowerShell
- ps: nuget install Newtonsoft.Json -Version 9.0.1 -OutputDirectory $pwd\bin
- ps: cp $pwd\bin\Docker\coreclr\Docker.*ps* $pwd\bin\Docker\
- ps: cp $pwd\bin\Newtonsoft.Json.9.0.1\lib\portable-net45+wp80+win8+wpa81\Newtonsoft.Json.dll $pwd\bin\Docker\coreclr\Newtonsoft.Json.dll
- ps: New-ExternalHelp -Path src\Docker.PowerShell\Help -OutputPath $pwd\bin\Docker\en-US
- ps: mkdir $pwd\testRepo
- ps: Register-PSRepository -Name test -SourceLocation $pwd\testRepo
- ps: Publish-Module -Path $pwd\bin\Docker -Repository test
test_script:
- ps: Install-Module -Name Docker -Repository test -Force
- ps: Import-Module Docker
- ps: |
    if (!(gcm -Module Docker)){
      throw "Module failed to load: no commands found."
    }
- ps: git checkout -- src/Docker.PowerShell/Docker.psd1
- ps: git checkout -- src/Docker.PowerShell/Docker.PowerShell.csproj
- ps: git config core.autocrlf true
- ps: New-MarkdownHelp -Module Docker -OutputFolder src\Docker.PowerShell\Help -ErrorAction SilentlyContinue
- ps: Update-MarkdownHelp -Path src\Docker.PowerShell\Help
- ps: |
    git add src\Docker.PowerShell\Help\.
    git status -s
    git diff
    if ((git status -s)){
      throw "Help files do not match updated cmdlets. Please update the help markdown to correspond to the latest changes."
    }
artifacts:
- path: testRepo/*.nupkg
